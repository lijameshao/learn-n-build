service: aws-websocket-chatapp

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'local'}
  region: us-east-1

resources:
  Conditions:
    IsProd:
      Fn::Equals:
        - ${self:provider.stage}
        - prod

  Resources:
    ApiGwAccountConfig:
      Type: "AWS::ApiGateway::Account"
      Properties:
        CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
    ApiGatewayLoggingRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: "/"
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

    ChatAppWebSocket:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ChatAppWebSocket
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"
        Description: "WebSocket API Gateway for chat app."

    ChatAppConnectRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref ChatAppWebSocket
        RouteKey: $connect
        # RouteResponseSelectionExpression: "$default"
        AuthorizationType: NONE
        ApiKeyRequired: false
        OperationName: ChatAppConnectRoute
        Target: !Join
          - "/"
          - - "integrations"
            - !Ref ChatAppConnectInteg

    # ChatAppConnectRouteResponse:
    #   Type: AWS::ApiGatewayV2::RouteResponse
    #   Properties:
    #     RouteId: !Ref ChatAppConnectRoute
    #     ApiId: !Ref ChatAppWebSocket
    #     RouteResponseKey: $default

    ChatAppConnectInteg:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref ChatAppWebSocket
        Description: Connect Integration
        # TODO: replace with Auth lambda
        IntegrationType: AWS_PROXY
        IntegrationUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt ConnectHandler2FFD52D8.Arn
            - /invocations
        # RequestTemplates:
        #   "200": '{"statusCode" : 200}'
        # TemplateSelectionExpression: "200"
        # PassthroughBehavior: "WHEN_NO_MATCH"

    # ChatAppConnectIntegResp:
    #   Type: AWS::ApiGatewayV2::IntegrationResponse
    #   Properties:
    #     ApiId: !Ref ChatAppWebSocket
    #     IntegrationId: !Ref ChatAppConnectInteg
    #     IntegrationResponseKey: "$default"
    #     ResponseTemplates:
    #       "200": '{"statusCode" : 200}'

    ChatAppDisconnectRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref ChatAppWebSocket
        RouteKey: $disconnect
        # RouteResponseSelectionExpression: "$default"
        AuthorizationType: NONE
        OperationName: ChatAppDisconnectRoute
        Target: !Join
          - "/"
          - - "integrations"
            - !Ref DisconnectInteg

    # DisconnectRouteResponse:
    #   Type: AWS::ApiGatewayV2::RouteResponse
    #   Properties:
    #     RouteId: !Ref ChatAppDisconnectRoute
    #     ApiId: !Ref ChatAppWebSocket
    #     RouteResponseKey: $default

    DisconnectInteg:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref ChatAppWebSocket
        Description: Disconnect Integration
        IntegrationType: AWS_PROXY
        IntegrationUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt DisconnectHandlerCB7ED6F7.Arn
            - /invocations
        # IntegrationType: MOCK
        # RequestTemplates:
        #   "200": '{"statusCode" : 200}'
        # TemplateSelectionExpression: "200"
        # PassthroughBehavior: "WHEN_NO_MATCH"

    # DisconnectIntegResp:
    #   Type: AWS::ApiGatewayV2::IntegrationResponse
    #   Properties:
    #     ApiId: !Ref ChatAppWebSocket
    #     IntegrationId: !Ref DisconnectInteg
    #     IntegrationResponseKey: "$default"
    #     ResponseTemplates:
    #       "200": '{"statusCode" : 200}'

    DefaultRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref ChatAppWebSocket
        RouteKey: $default
        # RouteResponseSelectionExpression: "$default"
        AuthorizationType: NONE
        OperationName: DefaultRoute
        Target: !Join
          - "/"
          - - "integrations"
            - !Ref DefaultInteg

    # DefaultRouteResponse:
    #   Type: AWS::ApiGatewayV2::RouteResponse
    #   Properties:
    #     RouteId: !Ref DefaultRoute
    #     ApiId: !Ref ChatAppWebSocket
    #     RouteResponseKey: $default

    DefaultInteg:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref ChatAppWebSocket
        Description: Default Integration
        IntegrationType: AWS_PROXY
        IntegrationUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt DefaultHandler604DF7AC.Arn
            - /invocations
        # IntegrationType: MOCK
        # RequestTemplates:
        #   "200": '{"statusCode" : 200}'
        # TemplateSelectionExpression: "200"

    # DefaultIntegResp:
    #   Type: AWS::ApiGatewayV2::IntegrationResponse
    #   Properties:
    #     ApiId: !Ref ChatAppWebSocket
    #     IntegrationId: !Ref DefaultInteg
    #     IntegrationResponseKey: $default
    #     ResponseTemplates:
    #       "200": '{"statusCode" : 200, "connectionId" : "$context.connectionId"}'
    #     TemplateSelectionExpression: "200"

    SendMessageRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref ChatAppWebSocket
        RouteKey: sendmessage
        # RouteResponseSelectionExpression: "$default"
        AuthorizationType: NONE
        OperationName: SendMessageRoute
        Target: !Join
          - "/"
          - - "integrations"
            - !Ref SendMessageInteg

    # SendMessageRouteResponse:
    #   Type: AWS::ApiGatewayV2::RouteResponse
    #   Properties:
    #     RouteId: !Ref SendMessageRoute
    #     ApiId: !Ref ChatAppWebSocket
    #     RouteResponseKey: $default

    SendMessageInteg:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref ChatAppWebSocket
        Description: Send Message Integration
        IntegrationType: AWS_PROXY
        IntegrationUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt SendMessageHandlerDFBBCD6B.Arn
            - /invocations
        # RequestTemplates:
        #   "200": '{"statusCode" : 200}'
        # TemplateSelectionExpression: "200"

    # SendMessageIntegResp:
    #   Type: AWS::ApiGatewayV2::IntegrationResponse
    #   Properties:
    #     ApiId: !Ref ChatAppWebSocket
    #     IntegrationId: !Ref SendMessageInteg
    #     IntegrationResponseKey: $default
    #     ResponseTemplates:
    #       "200": '{"statusCode" : 200, "connectionId" : "$context.connectionId"}'
    #     TemplateSelectionExpression: "200"

    Deployment:
      Type: AWS::ApiGatewayV2::Deployment
      DependsOn:
        - ChatAppConnectRoute
        - ChatAppDisconnectRoute
        - DefaultRoute
      Properties:
        ApiId: !Ref ChatAppWebSocket

    Stage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        StageName: dev
        Description: Dev stage
        DeploymentId: !Ref Deployment
        ApiId: !Ref ChatAppWebSocket
        DefaultRouteSettings:
          DetailedMetricsEnabled: true
          LoggingLevel: INFO

    ConnectionsTable8000B8A1:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: !If [IsProd, 2, 1]
          WriteCapacityUnits: !If [IsProd, 2, 1]
      UpdateReplacePolicy: Delete
      DeletionPolicy: Delete
    ConnectHandlerServiceRole7E4A9B1F:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action: "sts:AssumeRole"
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          Version: "2012-10-17"
        ManagedPolicyArns:
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ConnectHandlerServiceRoleDefaultPolicy7DE94863:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Statement:
            - Action:
                - "dynamodb:BatchWriteItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
              Effect: Allow
              Resource:
                - !GetAtt
                  - ConnectionsTable8000B8A1
                  - Arn
                - !Ref "AWS::NoValue"
          Version: "2012-10-17"
        PolicyName: ConnectHandlerServiceRoleDefaultPolicy7DE94863
        Roles:
          - !Ref ConnectHandlerServiceRole7E4A9B1F
    ConnectHandler2FFD52D8:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: |-
            const AWS = require('aws-sdk');
                  const ddb = new AWS.DynamoDB.DocumentClient();
                  exports.handler = async function (event, context) {
                    try {
                      await ddb
                        .put({
                          TableName: process.env.table,
                          Item: {
                            connectionId: event.requestContext.connectionId,
                          },
                        })
                        .promise();
                    } catch (err) {
                      return {
                        statusCode: 500,
                      };
                    }
                    return {
                      statusCode: 200,
                    };
                  };
        Role: !GetAtt
          - ConnectHandlerServiceRole7E4A9B1F
          - Arn
        Environment:
          Variables:
            table: !Ref ConnectionsTable8000B8A1
        Handler: index.handler
        Runtime: nodejs14.x
      DependsOn:
        - ConnectHandlerServiceRoleDefaultPolicy7DE94863
        - ConnectHandlerServiceRole7E4A9B1F

    ConnectHandlerApiGatewayLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Ref ConnectHandler2FFD52D8
        Principal: "apigateway.amazonaws.com"
      DependsOn:
        - ConnectHandler2FFD52D8

    DisconnectHandlerServiceRoleE54F14F9:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action: "sts:AssumeRole"
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          Version: "2012-10-17"
        ManagedPolicyArns:
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    DisconnectHandlerServiceRoleDefaultPolicy1800B9E5:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Statement:
            - Action:
                - "dynamodb:BatchWriteItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
              Effect: Allow
              Resource:
                - !GetAtt
                  - ConnectionsTable8000B8A1
                  - Arn
                - !Ref "AWS::NoValue"
          Version: "2012-10-17"
        PolicyName: DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
        Roles:
          - !Ref DisconnectHandlerServiceRoleE54F14F9
    DisconnectHandlerCB7ED6F7:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: |-
            const AWS = require('aws-sdk');
                  const ddb = new AWS.DynamoDB.DocumentClient();
                  
                  exports.handler = async function (event, context) {
                    await ddb
                      .delete({
                        TableName: process.env.table,
                        Key: {
                          connectionId: event.requestContext.connectionId,
                        },
                      })
                      .promise();
                    return {
                      statusCode: 200,
                    };
                  };
        Role: !GetAtt
          - DisconnectHandlerServiceRoleE54F14F9
          - Arn
        Environment:
          Variables:
            table: !Ref ConnectionsTable8000B8A1
        Handler: index.handler
        Runtime: nodejs14.x
      DependsOn:
        - DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
        - DisconnectHandlerServiceRoleE54F14F9
    DisconnectHandlerApiGatewayLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Ref DisconnectHandlerCB7ED6F7
        Principal: "apigateway.amazonaws.com"
      DependsOn:
        - DisconnectHandlerCB7ED6F7

    MessageHandlerServiceRoleDF05266A:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action: "sts:AssumeRole"
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          Version: "2012-10-17"
        ManagedPolicyArns:
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    MessageHandlerServiceRoleDefaultPolicyD818A6AA:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Statement:
            - Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetRecords"
                - "dynamodb:GetShardIterator"
                - "dynamodb:Query"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:ConditionCheckItem"
              Effect: Allow
              Resource:
                - !GetAtt
                  - ConnectionsTable8000B8A1
                  - Arn
                - !Ref "AWS::NoValue"
          Version: "2012-10-17"
        PolicyName: MessageHandlerServiceRoleDefaultPolicyD818A6AA
        Roles:
          - !Ref MessageHandlerServiceRoleDF05266A
    SendMessageHandlerDFBBCD6B:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: |-
            const AWS = require('aws-sdk');
                  const ddb = new AWS.DynamoDB.DocumentClient();
                  
                  exports.handler = async function (event, context) {
                    let connections;
                    try {
                      connections = await ddb.scan({ TableName: process.env.table }).promise();
                    } catch (err) {
                      return {
                        statusCode: 500,
                      };
                    }
                    const callbackAPI = new AWS.ApiGatewayManagementApi({
                      apiVersion: '2018-11-29',
                      endpoint:
                        event.requestContext.domainName + '/' + event.requestContext.stage,
                    });
                  
                    const message = JSON.parse(event.body).message;
                  
                    const sendMessages = connections.Items.map(async ({ connectionId }) => {
                      if (connectionId !== event.requestContext.connectionId) {
                        try {
                          await callbackAPI
                            .postToConnection({ ConnectionId: connectionId, Data: message })
                            .promise();
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    });
                  
                    try {
                      await Promise.all(sendMessages);
                    } catch (e) {
                      console.log(e);
                      return {
                        statusCode: 500,
                      };
                    }
                  
                    return { statusCode: 200 };
                  };
        Role: !GetAtt
          - MessageHandlerServiceRoleDF05266A
          - Arn
        Environment:
          Variables:
            table: !Ref ConnectionsTable8000B8A1
        Handler: index.handler
        Runtime: nodejs14.x
      DependsOn:
        - MessageHandlerServiceRoleDefaultPolicyD818A6AA
        - MessageHandlerServiceRoleDF05266A
    SendMessageHandlerApiGatewayLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Ref SendMessageHandlerDFBBCD6B
        Principal: "apigateway.amazonaws.com"
      DependsOn:
        - SendMessageHandlerDFBBCD6B

    DefaultHandlerServiceRoleDF00569C:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action: "sts:AssumeRole"
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          Version: "2012-10-17"
        ManagedPolicyArns:
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    DefaultHandlerServiceRoleDefaultPolicy2F57C32F:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Statement:
            - Action: "execute-api:ManageConnections"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*/*/POST/@connections/*"
            - Action: "execute-api:ManageConnections"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*/*/GET/@connections/*"
          Version: "2012-10-17"
        PolicyName: DefaultHandlerServiceRoleDefaultPolicy2F57C32F
        Roles:
          - !Ref DefaultHandlerServiceRoleDF00569C
    DefaultHandler604DF7AC:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: |-
            const AWS = require('aws-sdk');

                  exports.handler = async function (event, context) {
                    let connectionInfo;
                    let connectionId = event.requestContext.connectionId;
                  
                    const callbackAPI = new AWS.ApiGatewayManagementApi({
                      apiVersion: '2018-11-29',
                      endpoint:
                        event.requestContext.domainName + '/' + event.requestContext.stage,
                    });
                  
                    try {
                      connectionInfo = await callbackAPI
                        .getConnection({ ConnectionId: event.requestContext.connectionId })
                        .promise();
                    } catch (e) {
                      console.log(e);
                    }
                  
                    connectionInfo.connectionID = connectionId;
                  
                    await callbackAPI
                      .postToConnection({
                        ConnectionId: event.requestContext.connectionId,
                        Data:
                          'Use the sendmessage route to send a message. Your info:' +
                          JSON.stringify(connectionInfo),
                      })
                      .promise();
                  
                    return {
                      statusCode: 200,
                    };
                  };
        Role: !GetAtt
          - DefaultHandlerServiceRoleDF00569C
          - Arn
        Handler: index.handler
        Runtime: nodejs14.x
      DependsOn:
        - DefaultHandlerServiceRoleDefaultPolicy2F57C32F
        - DefaultHandlerServiceRoleDF00569C
    DefaultHandlerApiGatewayLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Ref DefaultHandler604DF7AC
        Principal: "apigateway.amazonaws.com"
      DependsOn:
        - DefaultHandler604DF7AC

    manageConnections7F91357B:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyDocument:
          Statement:
            - Action: "execute-api:ManageConnections"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*/*/POST/@connections/*"
          Version: "2012-10-17"
        PolicyName: manageConnections7F91357B
        Roles:
          - !Ref MessageHandlerServiceRoleDF05266A

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    pythonBin: python
    dockerizePip: non-linux
    slim: true
    layer:
      name: ${self:provider.stage}-python-requirements
      description: Python requirements lambda layer
      compatibleRuntimes:
        - python3.8
      licenseInfo: GPLv3
      allowedAccounts:
        - "*"
