# -*- coding: utf-8 -*-
"""L6-Agents.ipynb

Automatically generated by Colaboratory.

# LangChain: Agents

## Outline:

* Using built in LangChain tools: DuckDuckGo search and Wikipedia
* Defining your own tools
"""

import os

from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv()) # read local .env file

import warnings
warnings.filterwarnings("ignore")

"""## Example - Using Maths and Wikipedia"""

from langchain.agents import load_tools, initialize_agent, AgentType
from langchain.tools.python.tool import PythonREPLTool
from langchain.python import PythonREPL
from langchain.chat_models import ChatOpenAI

# Important to set temperature as 0 as we're using LM as reasoning agent
# and we want the reasoning engine to be as precise as possible
llm = ChatOpenAI(temperature=0)

# llm-math is actually a chain in itself, using LLM and calculator
# wikipdeia connects with wikipedia's API
tools = load_tools(["llm-math", "wikipedia"], llm=llm)

# handle_parsing_erros=True in case LM outputs something that can't be parsed into an action input
# It would pass the output to the LM and as it to correct itself
agent= initialize_agent(
    tools, 
    llm, 
    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors=True,
    verbose = True)

agent("What is 25% of 400?")

"""The answer 100.0 from Observation is coming from the calculator tool"""

question = "Tom M. Mitchell is an American computer scientist \
and the Founders University Professor at Carnegie Mellon University (CMU)\
what book did he write?"
result = agent(question)

"""From the observation, we can see that there are two Wiki pages about Tom Mitchell

## Example - Python agent
"""

from langchain.agents.agent_toolkits import create_python_agent
agent = create_python_agent(
    llm,
    tool=PythonREPLTool(),
    verbose=True
)

customer_list = [
    ["James", "Chase"],
    ["Harrison", "Ford"],
    ["Andrew", "Ng"],
    ["Loki", "Farmer"]
]

agent.run(f"""Sor these customers by last name and then first name \
and print the output: {customer_list}""")

"""## Built-in LangChain tools"""

#!pip install -U duckduckgo-search wikipedia

from langchain.agents import load_tools, initialize_agent
from langchain.chat_models import ChatOpenAI
from langchain.agents import AgentType

llm = ChatOpenAI(temperature=0, )

tools = load_tools(["ddg-search", "wikipedia"])

agent= initialize_agent(
    tools, 
    llm, 
    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors=True,
    verbose = True)

"""**Note**: 

Accessing the external DuckDuckGo agent can sometimes cause an exception. 

If you encounter this, please try it again, possibly when there is reduced load.
"""

try:
    agent("who won the 2022 world cup")
except:
    print("exception on external access")

question = "Tom M. Mitchell is an American computer scientist \
and the Founders University Professor at Carnegie Mellon University (CMU)\
what book did he write?"

try:
    result = agent(question) 
except: 
    print("exception on external access")

"""## Define your own tool"""

#!pip install DateTime

from langchain.agents import tool
from datetime import date

@tool
def time(text: str) -> str:
    """Returns todays date, use this for any \
    questions related to knowing todays date. \
    The input should always be an empty string, \
    and this function will always return todays \
    date - any date mathmatics should occur \
    outside this function."""
    return str(date.today())

agent= initialize_agent(
    tools + [time], 
    llm, 
    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors=True,
    verbose = True)

"""**Note**: 

The agent will sometimes come to the wrong conclusion (agents are a work in progress!). 

If it does, please try running it again.
"""

try:
    result = agent("whats the date today?") 
except: 
    print("exception on external access")

















